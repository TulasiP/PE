Subarray Products:
We define a subarray of an array, numbers, to be a contiguous block of numbers' elements having a length that is less than or equal to the length of the numbers array. For example, the subarrays of numbers = [1,2,3] are [1], [2], [3], [1,2], [2,3] and [1,2,3]. If we were to then find the products for each respective subarray, they would be 1, 2, 3, 1 x 2 = 2, 2 x 3 = 6 and 1 x 2 x 3 = 6

Complete the count function in the editor below. It has two parameters:
1. An array of n integers, numbers.
2. An integer, k.

The function must return a long integer denoting the total number of subarrays where the product of the subarray's elements are less than k.

Input Format:
Locked stub code in the editor reads the following input from stdin and passes it to the function.
The first line contains an integer, n, denoting the size of the nubmers array.
Each line i of the n subsequent lines (where 0 <= i < n) contains an integer describing numbers sub i.
The last line contains a single integer denoting k.

Constraints:
1 <= n <= 5 x 10 pow 5
1 <= numbers sub i <= 10 pow 2, where numbers sub i is the ith element of the numbers array.
1 <= k <= 10 pow 6

Output Format:
The function must return a long integer denoting the total number of subarrays having products less than k. This is printed to stdout by locked stub code in the editor.

Sample Input 0:
3
1
2
3
4

Sample Output 0:
4

Explanation 0:
numbers = [1, 2, 3]. We have the following 6 subarrays:
[1] with a product of 1.
[2] with a product of 2.
[3] with a product of 3.
[1,2] with a product of 1 x 2 = 2
[2,3] with a product of 2 x 3 = 6
[1,2,3] with a product of 1 x 2 x 3 = 6

The only subarrays having products less tha k = 4 are [1], [2], [3] and [1,2] so the function returns 4

Sample Input 1:
3
1
2
3
7

Sample Output 1:
6

Explanation 1:
numbers = [1, 2, 3]. We have the following 6 subarrays:
[1] with a product of 1.
[2] with a product of 2.
[3] with a product of 3.
[1,2] with a product of 1 x 2 = 2
[2,3] with a product of 2 x 3 = 6
[1,2,3] with a product of 1 x 2 x 3 = 6

All six of the above subarrays have products less than k = 7, so the function returns 6.

Sample Input 2:
11
4
13
20
32
44
59
61
71
75
86
88
567601

Sample Output2:
32

Source Code:
import java.util.*;

public class sample1 {

	static int[] a = new int[11];
	static ArrayList<Integer> al = new ArrayList<Integer>();
	static ArrayList<Integer> finalProducts = new ArrayList<Integer>();
	static int k = 567601;

	public static void main(String[] args) {
		a[0] = 4;
		a[1] = 13;
		a[2] = 20;
		a[3] = 32;
		a[4] = 44;
		a[5] = 59;
		a[6] = 61;
		a[7] = 71;
		a[8] = 75;
		a[9] = 86;
		a[10] = 88;

		// Step1
		for (int i = 0; i < a.length; i++) {
			al.add(a[i]);
		}

		// Step2
		int size = al.size();
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < al.size(); j++) {
				ProductOfSubset(j);
			}
			al.remove(0);
		}

		// Step 4
		int counter = 0;
		for (int i = 0; i < finalProducts.size(); i++) {
			if (finalProducts.get(i) < k && finalProducts.get(i) >= 0) {
				counter++;
			}
		}

		for (int i = 0; i < finalProducts.size(); i++) {
			System.out.println(finalProducts.get(i));
		}

		System.out.println(counter);

	}

	// Step3
	private static void ProductOfSubset(int index) {
		int product = 1;
		for (int i = 0; i <= index; i++) {
			product = product * al.get(i);
		}
		finalProducts.add(product);
	}

}
-------------------------------------------------------------------------
Final Discount Price:

import java.util.ArrayList;
import java.util.Scanner;

public class discount {

	public static void main(String[] args) {

		int[] d = new int[6];
		int[] p = new int[6];
		p[0] = 5;
		p[1] = 1;
		p[2] = 3;
		p[3] = 4;
		p[4] = 6;
		p[5] = 2;

		// Find discount values
		for (int i = 0; i < p.length; i++) { // i is price
			int counter = 0;
			for (int j = i + 1; j < p.length; j++) // j is discount
			{
				if (p[j] <= p[i]) {
					d[i] = p[j];
					counter = 1;
					break;
				}
			}

			if (counter == 0) {
				d[i] = 0;
			}
		}

		// Find total and non discounted index values
		ArrayList<Integer> al = new ArrayList<Integer>();
		int total = 0;
		for (int i = 0; i < p.length; i++) {
			total = total + p[i] - d[i];
			if (d[i] == 0) {
				al.add(i);
			}
		}

		System.out.println(total);

		// Print non discount index values
		for (int i = 0; i < al.size(); i++) {
			System.out.print(al.get(i) + " ");
		}
	}

}
------------------------------------------------------------------
